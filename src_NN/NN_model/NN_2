#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jun  7 15:40:07 2021

@author: ken
"""

import numpy as np
import pandas as pd
import re
import tensorflow.keras as keras
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from nltk.corpus import stopwords
from keras.layers import Input, LSTM, Embedding, Dense, Concatenate, TimeDistributed, Bidirectional, Attention
from keras.models import Model
from keras.callbacks import EarlyStopping
import warnings
import matplotlib.pyplot as plt
from keras import regularizers
from sklearn.model_selection import train_test_split

TrainDataPath = "/home/ken/git_nlp/Service-Requirement-Extraction-via-NLP/src/Leetcode_data/"
TestDataPath = "/home/ken/git_nlp/Service-Requirement-Extraction-via-NLP/src/Leetcode_data/ExtraData/"
PreTrain_WV_Path = "/home/ken/git_nlp/Service-Requirement-Extraction-via-NLP/src_NN/GloVe/"

contraction_map = { "ain't": "is not", "aren't": "are not","can't": "cannot", "'cause": "because", "could've": "could have", "couldn't": "could not",

                    "didn't": "did not", "doesn't": "does not", "don't": "do not", "hadn't": "had not", "hasn't": "has not", "haven't": "have not",
    
                    "he'd": "he would","he'll": "he will", "he's": "he is", "how'd": "how did", "how'd'y": "how do you", "how'll": "how will", "how's": "how is",
    
                    "I'd": "I would", "I'd've": "I would have", "I'll": "I will", "I'll've": "I will have","I'm": "I am", "I've": "I have", "i'd": "i would",
    
                    "i'd've": "i would have", "i'll": "i will",  "i'll've": "i will have","i'm": "i am", "i've": "i have", "isn't": "is not", "it'd": "it would",
    
                    "it'd've": "it would have", "it'll": "it will", "it'll've": "it will have","it's": "it is", "let's": "let us", "ma'am": "madam",
    
                    "mayn't": "may not", "might've": "might have","mightn't": "might not","mightn't've": "might not have", "must've": "must have",
    
                    "mustn't": "must not", "mustn't've": "must not have", "needn't": "need not", "needn't've": "need not have","o'clock": "of the clock",
    
                    "oughtn't": "ought not", "oughtn't've": "ought not have", "shan't": "shall not", "sha'n't": "shall not", "shan't've": "shall not have",
    
                    "she'd": "she would", "she'd've": "she would have", "she'll": "she will", "she'll've": "she will have", "she's": "she is",
    
                    "should've": "should have", "shouldn't": "should not", "shouldn't've": "should not have", "so've": "so have","so's": "so as",
    
                    "this's": "this is","that'd": "that would", "that'd've": "that would have", "that's": "that is", "there'd": "there would",
    
                    "there'd've": "there would have", "there's": "there is", "here's": "here is","they'd": "they would", "they'd've": "they would have",
    
                    "they'll": "they will", "they'll've": "they will have", "they're": "they are", "they've": "they have", "to've": "to have",
    
                    "wasn't": "was not", "we'd": "we would", "we'd've": "we would have", "we'll": "we will", "we'll've": "we will have", "we're": "we are",
    
                    "we've": "we have", "weren't": "were not", "what'll": "what will", "what'll've": "what will have", "what're": "what are",
    
                    "what's": "what is", "what've": "what have", "when's": "when is", "when've": "when have", "where'd": "where did", "where's": "where is",
    
                    "where've": "where have", "who'll": "who will", "who'll've": "who will have", "who's": "who is", "who've": "who have",
    
                    "why's": "why is", "why've": "why have", "will've": "will have", "won't": "will not", "won't've": "will not have",
    
                    "would've": "would have", "wouldn't": "would not", "wouldn't've": "would not have", "y'all": "you all",
    
                    "y'all'd": "you all would","y'all'd've": "you all would have","y'all're": "you all are","y'all've": "you all have",
    
                    "you'd": "you would", "you'd've": "you would have", "you'll": "you will", "you'll've": "you will have",
    
                    "you're": "you are", "you've": "you have"}

stop_words = set(stopwords.words('english'))
def SentencesProcessing(raw_sentences):
    new_sentences = raw_sentences.lower()
    new_sentences = re.sub(r'\([^)]*\)', '', new_sentences)
    new_sentences = re.sub('"','', new_sentences)
    new_sentences = ' '.join([contraction_map[t] if t in contraction_map else t for t in new_sentences.split(" ")])    
    new_sentences = re.sub(r"'s\b","",new_sentences)
    new_sentences = re.sub("[^a-zA-Z]", " ", new_sentences) 
    #tokens = [w for w in new_sentences.split() if not w in stop_words]
    long_words=[]
    for i in new_sentences.split():
        long_words.append(i)   
    return (" ".join(long_words)).strip()
    
def Cleaner(raw_data):
    clean_sentences = []
    for sen in raw_data['sentences']:
        clean_sentences.append(SentencesProcessing(sen))
    return pd.DataFrame(clean_sentences,columns=['sentences'])

def ReadFile_to_Data(dir_path, filename = 'sentences'):
    file = open(dir_path + filename, "r+")
    sentence_group = []
    x = file.readline()
    while(x != ""):
        sentence_group.append(x)
        x = file.readline()
    file.close()
    return pd.DataFrame(sentence_group,columns=['sentences'])

def NNDataProcessing(data, max_len_text = 100):
    tokenizer = Tokenizer()
    tokenizer.fit_on_texts(list(data))
    seq = tokenizer.texts_to_sequences(data)
    processed_data = pad_sequences(seq, maxlen=max_len_text, padding='post')
    voc = len(tokenizer.word_counts) + 1
    return processed_data, voc, tokenizer


def TestDataProcessing(data, tokenizer, max_len_text = 100):
    seq = tokenizer.texts_to_sequences(data)
    processed_data = pad_sequences(seq, maxlen=max_len_text, padding = 'post')
    return processed_data

def PretrainWV(tokenizer, voc, dim = 50):
    embedding_index = dict()
    file = open(r"../GloVe/glove.6B.100d.txt")
    for line in file:
        values = line.split()
        word = values[0]
        vector = np.asarray(values[1:], dtype='float32')
        embedding_index[word] = vector
    file.close()
    embedding_matrix = np.zeros((voc, dim))
    for word, i in tokenizer.word_index.items():
        embedding_vector = embedding_index.get(word)
        if embedding_vector is not None:
            embedding_matrix[i] = embedding_vector
    return embedding_matrix

def one_hot_encoding(tokenizer, voc, dim = 2676):
    embedding_index = dict()
    file = open(r"../One-hot/one_hot_leetcode.txt")
    for line in file:
        values = line.split()
        word = values[0]
        vector = np.asarray(values[1:], dtype='float32')
        embedding_index[word] = vector
    file.close()
    embedding_matrix = np.zeros((voc, dim))
    for word, i in tokenizer.word_index.items():
        embedding_vector = embedding_index.get(word)
        if embedding_vector is not None:
            embedding_matrix[i] = embedding_vector
    return embedding_matrix

def decode_sequence(input_seq):

    # Encode the input as state vectors.
    (e_out, e_h, e_c) = encoder_model.predict(input_seq)

    # Generate empty target sequence of length 1
    target_seq = np.zeros((1, 1))

    # Populate the first word of target sequence with the start word.
    target_seq[0, 0] = target_word_index['sostok']

    stop_condition = False
    decoded_sentence = ''
    
    Current_Seq = np.unique(input_seq)
    
    while not stop_condition:
        (output_tokens, h, c) = decoder_model.predict([target_seq]
                + [e_out, e_h, e_c])
        
        target_seq_prob = np.zeros(output_tokens.shape)
        for target in Current_Seq:
            target_seq_prob[0, -1, target] = output_tokens[0, -1, target]
        
        # Sample a token
        sampled_token_index = np.argmax(target_seq_prob[0, -1, :])
        if sampled_token_index == 0:
            break
        sampled_token = reverse_target_word_index[sampled_token_index]

        if sampled_token != 'eostok':
            decoded_sentence += ' ' + sampled_token

        # Exit condition: either hit max length or find the stop word.
        if sampled_token == 'eostok' or len(decoded_sentence.split()) >= max_len_text - 1:
            stop_condition = True

        # Update the target sequence (of length 1)
        target_seq = np.zeros((1, 1))
        target_seq[0, 0] = sampled_token_index

        # Update internal states
        (e_h, e_c) = (h, c)

    return decoded_sentence

def draw_loss(history):
    plt.plot(history.history['loss'])
    plt.plot(history.history['val_loss'])
    plt.title('Model Loss')
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.legend(['Train', 'Test'], loc='upper left')
    plt.show()

def calculate_accuracy(data, label_data):
    count = 0
    total_sample = len(data)
    for i in range(total_sample):
        label = ' '.join([t for t in label_data.loc[i,'tuple_based_information'].split(" ") if t != 'sostok' and t != 'eostok'])
        prediction = data[i].strip()
        if label == prediction:
            count += 1
    return count/total_sample

raw_sentences = ReadFile_to_Data(TrainDataPath, "sentences_test3")
processed_sentences = Cleaner(raw_sentences)
processed_sentences['sentences'] = processed_sentences['sentences'].apply(lambda x: 'sostok ' + x + ' eostok')

label_data = ReadFile_to_Data(TrainDataPath, 'NN_I_test3')
processed_label_data = Cleaner(label_data)
processed_label_data = processed_label_data.rename(columns={"sentences": "tuple_based_information"})
processed_label_data['tuple_based_information'] = processed_label_data['tuple_based_information'].apply(lambda x: 'sostok ' + x + ' eostok')
#train_data = pd.concat([processed_sentences, processed_label_data], axis = 1)
x, y = np.array(processed_sentences).flatten(), np.array(processed_label_data).flatten()
x_train, x_valid, y_train, y_valid = train_test_split(x, y, test_size = 0.1, random_state = 0)
es = EarlyStopping(monitor='loss', min_delta=0.001, patience=3, verbose=1)

#test
raw_test_sentences = ReadFile_to_Data(TestDataPath, "sentences")
processed_test_sentences = Cleaner(raw_test_sentences)
processed_test_sentences['sentences'] = processed_test_sentences['sentences'].apply(lambda x: 'sostok ' + x + ' eostok')
test_label_data = ReadFile_to_Data(TestDataPath, 'NN_I')
processed_test_label_data = Cleaner(test_label_data)
processed_test_label_data = processed_test_label_data.rename(columns={"sentences": "tuple_based_information"})
processed_test_label_data['tuple_based_information'] = processed_test_label_data['tuple_based_information'].apply(lambda x: 'sostok ' + x + ' eostok')
x_test, y_test = np.array(processed_test_sentences).flatten(), np.array(processed_test_label_data).flatten()




max_len_text = 80
embedding_dim = 100
x_train, x_voc_number, x_tokenizer = NNDataProcessing(x_train, max_len_text)
#x_emb_matrix = PretrainWV(x_tokenizer, x_voc_number, embedding_dim)
#x_emb_matrix = one_hot_encoding(x_tokenizer, x_voc_number, embedding_dim)
#y_train, y_voc_number, y_tokenizer = NNDataProcessing(y_train, max_len_text)
y_train = TestDataProcessing(y_train, x_tokenizer, max_len_text)
#y_emb_matrix = PretrainWV(y_tokenizer, y_voc_number, embedding_dim)
#y_emb_matrix = one_hot_encoding(y_tokenizer, y_voc_number, embedding_dim)

#valid
x_valid = TestDataProcessing(x_valid, x_tokenizer, max_len_text)
y_valid = TestDataProcessing(y_valid, x_tokenizer, max_len_text)

#test
x_test_ori = TestDataProcessing(x_test, x_tokenizer, max_len_text)
#y_test_ori = TestDataProcessing(y_test, y_tokenizer, max_len_text)
y_test_ori = TestDataProcessing(y_test, x_tokenizer, max_len_text)
x_test = x_test_ori[0:108]
y_test = y_test_ori[0:108]


latent_dim = 300
#embedding_dim = 100

encoder_inputs = Input(shape=(max_len_text, ))
enc_emb = Embedding(x_voc_number, embedding_dim, trainable=True)(encoder_inputs)
#enc_emb = Embedding(x_voc_number, x_voc_number, weights=[x_emb_matrix], trainable=False)(encoder_inputs)

encoder_lstm1 = LSTM(latent_dim, return_sequences=True, return_state=True, dropout=0, kernel_regularizer=(regularizers.l2(0)))
encoder_output1, state_h1, state_c1 = encoder_lstm1(enc_emb)

encoder_lstm2 = LSTM(latent_dim, return_sequences=True, return_state=True, dropout=0, kernel_regularizer=(regularizers.l2(0)))
encoder_output2, state_h2, state_c2 = encoder_lstm2(encoder_output1)

encoder_lstm3 = LSTM(latent_dim, return_sequences=True, return_state=True, dropout=0, kernel_regularizer=(regularizers.l2(0)))
encoder_outputs, state_h, state_c = encoder_lstm2(encoder_output2)


decoder_inputs = Input(shape=(None, ))
dec_emb_layer = Embedding(x_voc_number, embedding_dim, trainable=True)
#dec_emb_layer = Embedding(y_voc_number, y_voc_number, weights=[y_emb_matrix], trainable=False)
dec_emb = dec_emb_layer(decoder_inputs)
decoder_lstm = LSTM(latent_dim, return_sequences=True, return_state=True, dropout=0, kernel_regularizer=(regularizers.l2(0)))
decoder_outputs, decoder_fwd_state, decoder_back_state = decoder_lstm(dec_emb, initial_state=[state_h, state_c])
decoder_dense = TimeDistributed(Dense(x_voc_number, activation='softmax'))
decoder_outputs = decoder_dense(decoder_outputs)
#model = Model([encoder_inputs, decoder_inputs], decoder_outputs)

#model.summary()
from keras import backend as K 
K.clear_session()
model = Model([encoder_inputs, decoder_inputs], decoder_outputs)
model.summary()


model.compile(optimizer='rmsprop', loss='sparse_categorical_crossentropy')
history = model.fit(
    [x_train, y_train[:, :-1]],
    y_train.reshape(y_train.shape[0], y_train.shape[1], 1)[:, 1:],
    epochs=500,
    batch_size=6,
    validation_data=([x_valid,y_valid[:,:-1]],y_valid.reshape(y_valid.shape[0], y_valid.shape[1],1)[:,1:])
    )

reverse_target_word_index = x_tokenizer.index_word
reverse_source_word_index = x_tokenizer.index_word
target_word_index = x_tokenizer.word_index

encoder_model = Model(inputs=encoder_inputs, outputs=[encoder_outputs,state_h, state_c])
# Below tensors will hold the states of the previous time step
decoder_state_input_h = Input(shape=(latent_dim, ))
decoder_state_input_c = Input(shape=(latent_dim, ))
decoder_hidden_state_input = Input(shape=(max_len_text, latent_dim))

# Get the embeddings of the decoder sequence
dec_emb2 = dec_emb_layer(decoder_inputs)

# To predict the next word in the sequence, set the initial states to the states from the previous time step
(decoder_outputs2, state_h2, state_c2) = decoder_lstm(dec_emb2,initial_state=[decoder_state_input_h, decoder_state_input_c])

# A dense softmax layer to generate prob dist. over the target vocabulary
decoder_outputs2 = decoder_dense(decoder_outputs2)

# Final decoder model
model_i = ([decoder_inputs] + [decoder_hidden_state_input,decoder_state_input_h, decoder_state_input_c])
model_o = ([decoder_outputs2] + [state_h2, state_c2])
decoder_model = Model(inputs = model_i, outputs = model_o)

#decoder_model = Model(inputs = [decoder_inputs] + [decoder_hidden_state_input,decoder_state_input_h, decoder_state_input_c], outputs = [decoder_outputs2] + [state_h2, state_c2])
temp = []
for i in range(len(x_train)):
    #print(str(i+1))
    temp.append(decode_sequence(x_train[i].reshape(1,max_len_text)))
    #print(temp[i])
#result.append(temp)
draw_loss(history)
#print("------------Testing data------------")
temp_test = []
for i in range(len(x_test)):
    #print(str(i+1))
    temp_test.append(decode_sequence(x_test[i].reshape(1,max_len_text)))
    #print(temp_test[i])
    
print("Train acc: %f" % calculate_accuracy(temp, processed_label_data))
print("Test acc: %f" % calculate_accuracy(temp_test, processed_test_label_data))
'''
def decode_sequence(input_seq):

    # Encode the input as state vectors.
    (e_out, e_h, e_c) = encoder_model.predict(input_seq)

    # Generate empty target sequence of length 1
    target_seq = np.zeros((1, 1))

    # Populate the first word of target sequence with the start word.
    target_seq[0, 0] = target_word_index['sostok']

    stop_condition = False
    decoded_sentence = ''

    while not stop_condition:
        (output_tokens, h, c) = decoder_model.predict([target_seq]
                + [e_out, e_h, e_c])

        # Sample a token
        sampled_token_index = np.argmax(output_tokens[0, -1, :])
        sampled_token = reverse_target_word_index[sampled_token_index]

        if sampled_token != 'eostok':
            decoded_sentence += ' ' + sampled_token

        # Exit condition: either hit max length or find the stop word.
        if sampled_token == 'eostok' or len(decoded_sentence.split()) >= max_len_text - 1:
            stop_condition = True

        # Update the target sequence (of length 1)
        target_seq = np.zeros((1, 1))
        target_seq[0, 0] = sampled_token_index

        # Update internal states
        (e_h, e_c) = (h, c)

    return decoded_sentence

    temp = []
    for i in range(20):
        print(str(i+1))
        temp.append(decode_sequence(x_train[i].reshape(1,max_len_text)))
        print(temp[i])
    result.append(temp)
    del temp
    '''